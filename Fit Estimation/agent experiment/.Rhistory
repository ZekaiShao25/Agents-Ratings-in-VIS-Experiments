scale_color_manual(values = c("0" = "blue", "99" = "red"))
#ggsave("plot_descriptive.png", device = "png")
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.scenario2 = data %>% filter(name == "fit_estimation_experiment2") %>% filter(description=='scenario2_change_prompt') %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.scenario2)[6:11] <- c("sd04_decentering0","sd02_decentering99_down","sd02_decentering99_up","sd06_decentering0","sd04_decentering99_down","sd04_decentering99_up")
data.scenario2 <- data.scenario2 %>%
mutate(sd02_decentering99 = (sd02_decentering99_up + sd02_decentering99_down) / 2, sd04_decentering99 = (sd04_decentering99_up + sd04_decentering99_down) / 2)
data.scenario2 = data %>% filter(name == "fit_estimation_experiment2") %>% filter(description=='scenario2') %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.scenario2)[6:11] <- c("sd04_decentering0","sd02_decentering99_down","sd02_decentering99_up","sd06_decentering0","sd04_decentering99_down","sd04_decentering99_up")
data.scenario2 <- data.scenario2 %>%
mutate(sd02_decentering99 = (sd02_decentering99_up + sd02_decentering99_down) / 2, sd04_decentering99 = (sd04_decentering99_up + sd04_decentering99_down) / 2)
data.scenario2.reshaped <- reshape2::melt(data.scenario2[,c(12,13,6,9)])
data.scenario2.reshaped$Noise <- paste0("0.",gsub("sd0([2|4|6])_decentering.*", "\\1", data.scenario2.reshaped$variable))
data.scenario2.reshaped$Decentering <- ifelse(grepl("decentering0$", data.scenario2.reshaped$variable), "0", "99")
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.scenario2 <- data.frame(noise = character(),decentering = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise_decentering in list(c("0.2","99"),c("0.4","99"),c("0.4","0"),c("0.6","0"))) {
noise = noise_decentering[1]
decentering = noise_decentering[2]
group_data <- data.scenario2.reshaped %>% filter(Noise == noise) %>% filter(Decentering == decentering)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,decentering=decentering,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.scenario2 <- bind_rows(stat.scenario2, new_row)
}
p <- ggplot(stat.scenario2, aes(x = noise, y = mean, group = decentering, shape = decentering, color = decentering)) +
geom_point(size = 2) +
geom_line() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.1) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")+
scale_shape_manual(values = c("0" = 16, "99" = 17))+
scale_color_manual(values = c("0" = "blue", "99" = "red"))
#ggsave("plot_descriptive.png", device = "png")
print(p)
View(data)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
packageVersion("dplyr")
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
row_number()
data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number())
data.e1 = data %>% filter(name == "fit_estimation_experiment1")
%>% mutate(row = row_number()) %>%
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>%
mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
# boxplot
p = ggplot(data.e1.reshaped, aes(x = variable, y = value)) +
geom_boxplot() +
theme_minimal() +
xlab("Noise level in SD") +
ylab("100 - Fit Rating")
#ggsave('experiment1_boxplot.png',device = 'png')
print(p)
# mean+ci(bootstrap) dotplot
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
# initializing
#rm(list = ls())
library(jsonlite)
library(dplyr)
library(ggplot2)
library(boot)
library(tidyr)
set.seed(10387)
data = fromJSON("fit.json")
data.e1 = data %>% filter(name == "fit_estimation_experiment1") %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.e1)[6:10] <- c("0.5", "1", "1.5", "2", "2.5")
data.e1.reshaped <- reshape2::melt(data.e1[,6:10])
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.e1 <- data.frame(noise = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(noise in unique(data.e1.reshaped$variable)) {
group_data <- filter(data.e1.reshaped, variable == noise)
boot_result <- boot(data = group_data, statistic = function(data, indices) bootstrap_mean(data, indices, 'value'), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(noise=noise,mean=mean(group_data[['value']], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.e1 <- bind_rows(stat.e1, new_row)
}
p = ggplot(stat.e1, aes(x = noise, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Noise level in SD", y = "Fit Rating")
#ggsave('experiment1_mean+ci.png',device = 'png')
print(p)
View(data.e1)
View(data.e1)
data.e1$image_urls
data.compare_sd02_sd12 = data %>% filter(name == "fit_estimation_experiment2") %>% filter(grepl("^compare_sd02_sd12_parallel_experiment", description)) %>% mutate(row = row_number()) %>%
unnest_wider(score, names_sep = "_") %>%
select(-row)
colnames(data.compare_sd02_sd12)[6:13] <- c("sd02_neutral","sd02_light","sd02_middle","sd02_strong","sd12_neutral","sd12_light","sd12_middle","sd12_strong")
bootstrap_mean <- function(data, indices, column) {
d <- data[indices, ]
mean(d[[column]], na.rm = TRUE)
}
stat.compare_sd02_sd12 <- data.frame(condition = character(), mean = numeric(), ci_lower = numeric(), ci_upper = numeric())
for(condition in c("sd02_neutral","sd02_light","sd02_middle","sd02_strong","sd12_neutral","sd12_light","sd12_middle","sd12_strong")){
boot_result <- boot(data = data.compare_sd02_sd12, statistic = function(data, indices) bootstrap_mean(data, indices, condition), R = 10000)
ci = boot.ci(boot_result, type = "bca")$bca[4:5]
new_row = list(condition=condition, mean=mean(data.compare_sd02_sd12[[condition]], na.rm = TRUE), ci_lower=ci[1], ci_upper=ci[2])
stat.compare_sd02_sd12 <- bind_rows(stat.compare_sd02_sd12, new_row)
}
stat.compare_sd02_sd12$condition = factor(stat.compare_sd02_sd12$condition,levels = c("sd02_neutral","sd02_light","sd02_middle","sd02_strong","sd12_neutral","sd12_light","sd12_middle","sd12_strong"))
p = ggplot(stat.compare_sd02_sd12, aes(x = condition, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2) +
theme_minimal() +
labs(x = "Condition", y = "Fit Rating")
#ggsave('compare_sd04_middle_sd06_neutral.png',device = 'png')
print(p)
View(data.compare_sd02_sd12)
data.compare_sd02_sd12$image_urls
